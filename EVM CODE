//This is the project's code, Electronic Voting Machine, where I have used EEPROM at24c256 to store the data to ensure no information loss
//when power is absent. The project is also capable of printing the data from EEPROM to lcd whenever required.


#include<Wire.h>
#include<LiquidCrystal_I2C.h>
#include <Keypad.h>
#define i2c_address 0x50

int A = 4;
int B = 5;
int C = A0;
int D = 6;
int R =3;
LiquidCrystal_I2C lcd(0x27,20,4);

int buzPIN = 2;
int a = 0, b = 0, c = 0, d = 0, tot = 0;
int dt_s = 5000;
int dt=1000;
String pad;
const byte numRows = 4;
const byte numCols = 4;
String password = "4321";
char keypressed;
int flag=0;
int mem=0;
void readKeypad();
char keymap[numRows][numCols] =
{
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
//------------------------------------------------------------
byte rowPins[numRows] = {13,12,11,10};
byte colPins[numCols] = {9,8,7,6};

Keypad myKeypad = Keypad(makeKeymap(keymap), rowPins, colPins, numRows, numCols); //mapping keypad
void readKeypad() {
  keypressed = myKeypad.getKey(); //deteksi penekanan keypad
  if (keypressed != '#') {
    String konv = String(keypressed);
    pad += konv;
  }
 } 
//int maxaddress = 1500;
int startaddress=0;
int maxaddress = 4; 
void setup() {
  pinMode(A, INPUT);
  pinMode(B, INPUT);
  pinMode(C, INPUT);
  pinMode(D, INPUT);
  pinMode(R,INPUT);
  
  pinMode(buzPIN, OUTPUT);
  
  Serial.begin(9600);
  
}

void loop() {
  lcd.init();
  //lcd.backlight();
  int A_State = digitalRead(A);
  int B_State = digitalRead(B);
  int C_State = digitalRead(C);
  int D_State = digitalRead(D);
  int R_State = digitalRead(R);
  if(mem==0){
    int address=startaddress;
    byte rcvData = 0xFF;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // Send the Most Significant Byte (MSB)
    Wire.write((int)(address & 0xFF)); // Send the Least Significant Byte (LSB)
    Wire.endTransmission();
    Wire.requestFrom(i2c_address, 1);
    if (Wire.available()) {
      rcvData = Wire.read();
    }
    a=rcvData;
    address=address+1;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // Send the Most Significant Byte (MSB)
    Wire.write((int)(address & 0xFF)); // Send the Least Significant Byte (LSB)
    Wire.endTransmission();
    Wire.requestFrom(i2c_address, 1);
    if (Wire.available()) {
      rcvData = Wire.read();
    }
    b=rcvData;
    address=address+1;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // Send the Most Significant Byte (MSB)
    Wire.write((int)(address & 0xFF)); // Send the Least Significant Byte (LSB)
    Wire.endTransmission();
    Wire.requestFrom(i2c_address, 1);
    if (Wire.available()) {
      rcvData = Wire.read();
    }
    c=rcvData;
    address=address+1;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // Send the Most Significant Byte (MSB)
    Wire.write((int)(address & 0xFF)); // Send the Least Significant Byte (LSB)
    Wire.endTransmission();
    Wire.requestFrom(i2c_address, 1);
    if (Wire.available()) {
      rcvData = Wire.read();
    }
    d=rcvData;
    mem=1;
  }
  
  if (A_State == HIGH && B_State == LOW && C_State == LOW && D_State == LOW ) {
    int address=startaddress+0;
    byte rcvData = 0xFF;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // Send the Most Significant Byte (MSB)
    Wire.write((int)(address & 0xFF)); // Send the Least Significant Byte (LSB)
    Wire.endTransmission();
    Wire.requestFrom(i2c_address, 1);
    if (Wire.available()) {
      rcvData = Wire.read();
    }
    a=rcvData+1;
    rcvData=rcvData+1;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // MSB
    Wire.write((int)(address & 0xFF)); // LSB
    Wire.write(rcvData);
    Wire.endTransmission();
    delay(5);
    lcd.setCursor(2,0);
    lcd.print("VOTED A");
    lcd.backlight();
    tone(buzPIN,10000,dt);
    delay(dt_s);
    lcd.noBacklight(); 
  } 
  if (A_State == LOW && B_State == HIGH && C_State == LOW && D_State == LOW) {
    int address=startaddress+1;
    byte rcvData = 0xFF;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // Send the Most Significant Byte (MSB)
    Wire.write((int)(address & 0xFF)); // Send the Least Significant Byte (LSB)
    Wire.endTransmission();
    Wire.requestFrom(i2c_address, 1);
    if (Wire.available()) {
      rcvData = Wire.read();
    }
    b=rcvData+1;
    rcvData=rcvData+1;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // MSB
    Wire.write((int)(address & 0xFF)); // LSB
    Wire.write(rcvData);
    Wire.endTransmission();
    delay(5);
    lcd.setCursor(2,0);
    lcd.print("VOTED B");
    lcd.backlight();
    tone(buzPIN,10000,dt);
    delay(dt_s);
    lcd.noBacklight(); 

  } 
  if (A_State == LOW && B_State == LOW && C_State == HIGH && D_State == LOW) {
    int address=startaddress+2;
    byte rcvData = 0xFF;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // Send the Most Significant Byte (MSB)
    Wire.write((int)(address & 0xFF)); // Send the Least Significant Byte (LSB)
    Wire.endTransmission();
    Wire.requestFrom(i2c_address, 1);
    if (Wire.available()) {
      rcvData = Wire.read();
    }
    c=rcvData+1;
    rcvData=rcvData+1;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // MSB
    Wire.write((int)(address & 0xFF)); // LSB
    Wire.write(rcvData);
    Wire.endTransmission();
    delay(5);
    lcd.setCursor(2,0);
    lcd.print("VOTED C");
    lcd.backlight();
    tone(buzPIN,10000,dt);
    delay(dt_s);
    lcd.noBacklight(); 

  } 
   if (A_State == LOW && B_State == LOW && C_State == LOW && D_State == HIGH) {
    int address=startaddress+3;
    byte rcvData = 0xFF;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // Send the Most Significant Byte (MSB)
    Wire.write((int)(address & 0xFF)); // Send the Least Significant Byte (LSB)
    Wire.endTransmission();
    Wire.requestFrom(i2c_address, 1);
    if (Wire.available()) {
      rcvData = Wire.read();
    }
    d=rcvData+1;
    rcvData=rcvData+1;
    Wire.beginTransmission(i2c_address);
    Wire.write((int)(address >> 8));   // MSB
    Wire.write((int)(address & 0xFF)); // LSB
    Wire.write(rcvData);
    Wire.endTransmission();
    delay(5);
    lcd.setCursor(2,0);
    lcd.print("VOTED D");
    lcd.backlight();
    tone(buzPIN,10000,dt);
    delay(dt_s);
    lcd.noBacklight(); 
  }


  int screen=0;
  if(R_State==HIGH){
    lcd.backlight();
    while(screen==0){
     readKeypad();
     lcd.setCursor(0, 0);
     lcd.print("Enter Password:");
     if (keypressed == '#') {
      if (pad == password)
       {
      lcd.setCursor(3, 2);
      lcd.print("Access Granted");
      flag=1;
    } 
    else {
      lcd.setCursor(3, 2);
      lcd.print("Access Denied");
     }
    } 
    if (keypressed == '*') {
     pad = "";
     lcd.clear();
    }
    if(flag==1){
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("RESULT");
      lcd.setCursor(1,1);
      lcd.print("A");
      lcd.setCursor(1,2);
      lcd.print(a);
      lcd.setCursor(5,1);
      lcd.print("B");
      lcd.setCursor(5,2);
      lcd.print(b);
      lcd.setCursor(9,1);
      lcd.print("C");
      lcd.setCursor(9,2);
      lcd.print(c);
      lcd.setCursor(13,1);
      lcd.print("D");
      lcd.setCursor(13,2);
      lcd.print(d);
      lcd.setCursor(17,1);
      lcd.print("TOT");
      lcd.setCursor(17,2);
      lcd.print(a+b+c+d);
      delay(10000);
      flag=0;
      pad = "";
      lcd.clear();
      screen=1;
  }
  
  lcd.setCursor(15, 0);
  lcd.print(pad);
  delay(100);
  
  }
  }
}
